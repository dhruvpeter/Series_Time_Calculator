{"version":3,"sources":["component/SeriesTimeCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["SeriesTimeCalculator","useState","input","setInput","JSON","parse","localStorage","getItem","results","setResults","days","hours","watchTime","setWatchTime","className","onSubmit","event","a","title","options","method","url","params","q","headers","axios","request","response","data","filter","result","titleType","toLowerCase","console","log","runningTimeInMinutes","resultHours","Math","floor","numberOfEpisodes","resultDays","newWatchTimeHours","newWatchTime","setItem","stringify","alert","message","preventDefault","updateResult","type","name","onChange","target","value","placeholder","map","index","src","image","alt","onClick","key","deletedEntry","deletedEntryHours","deletedEntryDays","newResults","deleteItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAKe,SAASA,IAEtB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAASG,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,IAAtF,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCR,mBAASG,KAAKC,MAAMC,aAAaC,QAAQ,eAAiB,CAAEG,KAAM,EAAGC,MAAO,IAA9G,mBAAOC,EAAP,KAAkBC,EAAlB,KAsGA,OACE,sBAAKC,UAAU,YAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,wDACA,sBAAKA,UAAU,OAAf,2BACiBF,EAAUF,KAD3B,SACuCE,EAAUD,MADjD,YAGA,uBAAMI,SAvGO,SAACC,GAAU,4CAG5B,8CAAAC,EAAA,6DACQC,EAAQhB,EAERiB,EAAU,CACdC,OAAQ,MACRC,IAAK,0CACLC,OAAQ,CAAEC,EAAGrB,GACbsB,QAAS,CACP,iBACE,qDACF,kBAAmB,yBAVzB,kBAe2BC,IAAMC,QAAQP,GAfzC,OAeUQ,EAfV,SAgBqBA,EAASC,KAAKpB,QAAQqB,QACrC,SAACC,GAAD,MACuB,aAArBA,EAAOC,WACPD,EAAOZ,MAAMc,gBAAkBd,EAAMc,iBAnB7C,oBAgBWF,EAhBX,OAuBMG,QAAQC,IAAIJ,GAEZrB,EAAW,GAAD,mBAAKD,GAAL,CAAcsB,KAExBG,QAAQC,IAAIJ,EAAOK,sBAEbC,EAAcC,KAAKC,MACtBR,EAAOK,qBAAuBL,EAAOS,iBAAoB,IAEtDC,EAAaH,KAAKC,MAAMF,EAAc,IACtCK,EAAoB7B,EAAUD,MAASyB,EAAc,GAE3DH,QAAQC,IAAIE,EAAaI,EAAYC,GACjCC,EAAe,GAGjBA,EADED,GAAqB,GACR,CACb/B,KAAME,EAAUF,KAAO8B,EAAa,EACpC7B,MAAO8B,EAAoB,IAId,CACb/B,KAAME,EAAUF,KAAO8B,EACvB7B,MAAO8B,GAGX5B,EAAa6B,GACbvC,EAAS,IACTG,aAAaqC,QAAQ,YAAavC,KAAKwC,UAAUF,IACjDpC,aAAaqC,QAAQ,UAAWvC,KAAKwC,UAAL,sBAAmBpC,GAAnB,CAA4BsB,OAE5De,MAAM,gCAvDZ,kDA2DIZ,QAAQC,IAAI,KAAIY,SA3DpB,2DAH4B,sBAC5B9B,EAAM+B,iBADsB,mCAiE5BC,IAsCI,UACE,wBACA,uBACEC,KAAK,OACLC,KAAK,QACLC,SAhHW,SAACnC,GACpBb,EAASa,EAAMoC,OAAOC,QAgHdA,MAAOnD,EACPoD,YAAY,4BAKlB,6BACG9C,EAAQ+C,KAAI,SAAC3B,EAAM4B,GAAP,OACX,+BACE,qBAAKC,IAAK7B,EAAK8B,MAAMrC,IAAKsC,IAAI,gBAC9B,qBAAK7C,UAAU,QAAf,SACE,6BAAKc,EAAKV,UAGZ,mBAAGJ,UAAU,eAAe8C,QAAS,kBAvD5B,SAACC,GAClB,IAAMC,EAAetD,EAAQqD,GACvBE,EAAoB1B,KAAKC,MAC5BwB,EAAa3B,qBAAuB2B,EAAavB,iBAAoB,IAElEyB,EAAmB3B,KAAKC,MAAMyB,EAAoB,IAClDtB,EAAoB7B,EAAUD,MAASoD,EAAoB,GAE7DrB,EAAe,GAEjBA,EADED,EAAoB,EACP,CACb/B,KAAME,EAAUF,KAAOsD,EAAmB,EAC1CrD,MAAO8B,EAAoB,IAGd,CACb/B,KAAME,EAAUF,KAAOsD,EACvBrD,MAAO8B,GAIX,IAAMwB,EAAazD,EAAQqB,QAAO,SAACD,EAAM4B,GAAP,OAAiBA,IAAUK,KAC7DpD,EAAWwD,GACXpD,EAAa6B,GACbpC,aAAaqC,QAAQ,YAAavC,KAAKwC,UAAUF,IACjDpC,aAAaqC,QAAQ,UAAWvC,KAAKwC,UAAUqB,IA8BIC,CAAWV,QAN/CA,WC3HJW,MARf,WACE,OACE,qBAAKrD,UAAU,MAAf,SACE,cAAC,EAAD,OCQSsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d0bbf9af.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"./SeriesTimeCalculator.css\";\n\nimport axios from \"axios\";\n\nexport default function SeriesTimeCalculator() {\n\n  const [input, setInput] = useState(\"\");\n  const [results, setResults] = useState(JSON.parse(localStorage.getItem('results')) || []);\n  const [watchTime, setWatchTime] = useState(JSON.parse(localStorage.getItem('watchTime')) || { days: 0, hours: 0 });\n  \n  const handleChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const storeItems = (event) => {\n    event.preventDefault();\n\n    async function updateResult() {\n      const title = input;\n\n      const options = {\n        method: \"GET\",\n        url: \"https://imdb8.p.rapidapi.com/title/find\",\n        params: { q: input },\n        headers: {\n          \"x-rapidapi-key\":\n            \"350b05e5efmshbe4a30ce50ae94ap1bc047jsnd95e5bf5097e\",\n          \"x-rapidapi-host\": \"imdb8.p.rapidapi.com\",\n        },\n      };\n\n      try {\n        const response = await axios.request(options);\n        const [result] = response.data.results.filter(\n          (result) =>\n            result.titleType === \"tvSeries\" &&\n            result.title.toLowerCase() === title.toLowerCase()\n        );\n\n        if(result) {\n          console.log(result);\n\n          setResults([...results, result]);\n  \n          console.log(result.runningTimeInMinutes);\n  \n          const resultHours = Math.floor(\n            (result.runningTimeInMinutes * result.numberOfEpisodes) / 60\n          );\n          const resultDays = Math.floor(resultHours / 24);\n          const newWatchTimeHours = watchTime.hours + (resultHours % 24);\n  \n          console.log(resultHours, resultDays, newWatchTimeHours);\n          var newWatchTime = {};\n  \n          if (newWatchTimeHours >= 24) {\n            newWatchTime = {\n              days: watchTime.days + resultDays + 1,\n              hours: newWatchTimeHours % 24,\n            }\n            // setWatchTime();\n          } else {\n            newWatchTime = {\n              days: watchTime.days + resultDays,\n              hours: newWatchTimeHours,\n            }\n          }\n          setWatchTime(newWatchTime);\n          setInput(\"\");\n          localStorage.setItem('watchTime', JSON.stringify(newWatchTime));\n          localStorage.setItem('results', JSON.stringify([...results, result]));\n        } else {\n          alert('This series in not available');\n        }\n\n      } catch (err) {\n        console.log(err.message);\n      }\n    }\n    updateResult();\n  };\n\n  const deleteItem = (key) => {\n    const deletedEntry = results[key];\n    const deletedEntryHours = Math.floor(\n      (deletedEntry.runningTimeInMinutes * deletedEntry.numberOfEpisodes) / 60\n    );\n    const deletedEntryDays = Math.floor(deletedEntryHours / 24);\n    const newWatchTimeHours = watchTime.hours - (deletedEntryHours % 24);\n\n    var newWatchTime = {};\n    if (newWatchTimeHours < 0) {\n      newWatchTime = {\n        days: watchTime.days - deletedEntryDays - 1,\n        hours: newWatchTimeHours + 24,\n      }\n    } else {\n      newWatchTime = {\n        days: watchTime.days - deletedEntryDays,\n        hours: newWatchTimeHours,\n      }\n    }\n\n    const newResults = results.filter((data, index) => index !== key)\n    setResults(newResults);\n    setWatchTime(newWatchTime);\n    localStorage.setItem('watchTime', JSON.stringify(newWatchTime));\n    localStorage.setItem('results', JSON.stringify(newResults));\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"input-section\">\n        <h1>Series Time Calculator</h1>\n        <div className=\"time\">\n          Watched time: {watchTime.days} Days {watchTime.hours} Hours\n        </div>\n        <form onSubmit={storeItems}>\n          <div></div>\n          <input\n            type=\"text\"\n            name=\"input\"\n            onChange={handleChange}\n            value={input}\n            placeholder=\"Type in a TV Show\"\n          />\n        </form>\n      </div>\n\n      <ul>\n        {results.map((data, index) => (\n          <li key={index}>\n            <img src={data.image.url} alt=\"series-logo\"/>\n            <div className=\"title\">\n              <h3>{data.title}</h3>\n            </div>\n\n            <i className=\"fas fa-times\" onClick={() => deleteItem(index)}></i>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import SeriesTimeCalculator from \"./component/SeriesTimeCalculator\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SeriesTimeCalculator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
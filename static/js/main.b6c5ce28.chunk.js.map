{"version":3,"sources":["component/SeriesTimeCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["SeriesTimeCalculator","useState","input","setInput","JSON","parse","localStorage","getItem","results","setResults","days","hours","watchTime","setWatchTime","className","onSubmit","event","a","title","options","method","url","params","q","headers","axios","request","response","data","filter","result","titleType","toLowerCase","resultHours","Math","floor","runningTimeInMinutes","numberOfEpisodes","resultDays","newWatchTimeHours","newWatchTime","setItem","stringify","alert","console","log","message","preventDefault","updateResult","type","name","onChange","target","value","placeholder","map","index","onClick","key","deletedEntry","deletedEntryHours","deletedEntryDays","newResults","deleteItem","src","image","alt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6c5ce28.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./SeriesTimeCalculator.css\";\r\n\r\nexport default function SeriesTimeCalculator() {\r\n\r\n  const [input, setInput] = useState(\"\");\r\n  const [results, setResults] = useState(JSON.parse(localStorage.getItem('results')) || []);\r\n  const [watchTime, setWatchTime] = useState(JSON.parse(localStorage.getItem('watchTime')) || { days: 0, hours: 0 });\r\n  \r\n  const handleChange = (event) => {\r\n    setInput(event.target.value);\r\n  };\r\n\r\n  const storeItems = (event) => {\r\n    event.preventDefault();\r\n\r\n    async function updateResult() {\r\n      const title = input;\r\n\r\n      const options = {\r\n        method: \"GET\",\r\n        url: \"https://imdb8.p.rapidapi.com/title/find\",\r\n        params: { q: input },\r\n        headers: {\r\n          \"x-rapidapi-key\":\r\n            \"350b05e5efmshbe4a30ce50ae94ap1bc047jsnd95e5bf5097e\",\r\n          \"x-rapidapi-host\": \"imdb8.p.rapidapi.com\",\r\n        },\r\n      };\r\n\r\n      try {\r\n        const response = await axios.request(options);\r\n        const [result] = response.data.results.filter(\r\n          (result) =>\r\n            result.titleType === \"tvSeries\" &&\r\n            result.title.toLowerCase() === title.toLowerCase()\r\n        );\r\n\r\n        if(result) {\r\n          setResults([...results, result]);\r\n  \r\n          const resultHours = Math.floor(\r\n            (result.runningTimeInMinutes * result.numberOfEpisodes) / 60\r\n          );\r\n          const resultDays = Math.floor(resultHours / 24);\r\n          const newWatchTimeHours = watchTime.hours + (resultHours % 24);\r\n\r\n          var newWatchTime = {\r\n            days: watchTime.days + resultDays,\r\n            hours: newWatchTimeHours\r\n          };  \r\n          if(newWatchTimeHours >= 24) {\r\n            newWatchTime.days += 1;\r\n            newWatchTime.hours %= 24;\r\n          }\r\n\r\n          setWatchTime(newWatchTime);\r\n          setInput(\"\");\r\n\r\n          localStorage.setItem('watchTime', JSON.stringify(newWatchTime));\r\n          localStorage.setItem('results', JSON.stringify([...results, result]));\r\n\r\n        } else {\r\n          alert(\"This series in not available\");\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    }\r\n    updateResult();\r\n  };\r\n\r\n  const deleteItem = (key) => {\r\n    const deletedEntry = results[key];\r\n    const deletedEntryHours = Math.floor(\r\n      (deletedEntry.runningTimeInMinutes * deletedEntry.numberOfEpisodes) / 60\r\n    );\r\n    const deletedEntryDays = Math.floor(deletedEntryHours / 24);\r\n    const newWatchTimeHours = watchTime.hours - (deletedEntryHours % 24);\r\n\r\n    var newWatchTime = {\r\n      days: watchTime.days - deletedEntryDays,\r\n      hours: newWatchTimeHours,\r\n    };\r\n\r\n    if(newWatchTimeHours < 0) {\r\n      newWatchTime.days -= 1;\r\n      newWatchTime.hours += 24;\r\n    }\r\n\r\n    const newResults = results.filter((data, index) => index !== key);\r\n    setResults(newResults);\r\n    setWatchTime(newWatchTime);\r\n\r\n    localStorage.setItem('watchTime', JSON.stringify(newWatchTime));\r\n    localStorage.setItem('results', JSON.stringify(newResults));\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"input-container\">\r\n        <h1>Series Time Calculator</h1>\r\n        <div className=\"time\">\r\n          {watchTime.days} Days {watchTime.hours} Hours\r\n        </div>\r\n        <form onSubmit={storeItems}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"input\"\r\n            onChange={handleChange}\r\n            value={input}\r\n            placeholder=\"Type in a TV Show\"\r\n          />\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"tiles\">\r\n        {results.map((data, index) => (\r\n          <div key={index} className=\"card\">\r\n            <div\r\n              className=\"fas fa-times delete\"\r\n              onClick={() => deleteItem(index)}\r\n            ></div>\r\n            <div className=\"image\">\r\n              <img src={data.image.url} alt=\"Tv Series\"/>\r\n            </div>\r\n\r\n            <div className=\"title\">\r\n              <h3>{data.title}</h3>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import SeriesTimeCalculator from \"./component/SeriesTimeCalculator\";\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SeriesTimeCalculator />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}